server:
  port: 8080

spring:
  application:
    name: gateway
  redis:
    host: localhost
    port: 6379
    database: 0
  profiles:
    active: limit_route

---
#限流配置
spring:
  cloud:
    gateway:
      routes:
        - id: limit_route
          uri: http://httpbin.org:80/get
          predicates:
            - After=2017-01-20T17:42:47.789-07:00[America/Denver]
          filters:
            - name: RequestRateLimiter
              args:
                key-resolver: '#{@hostAddrKeyResolver}'  #用于限流的键的解析器的 Bean 对象的名字。它使用 SpEL 表达式根据#{@beanName}从 Spring 容器中获取 Bean 对象。
                redis-rate-limiter.replenishRate: 1  #令牌桶每秒填充平均速率
                redis-rate-limiter.burstCapacity: 3  #令牌桶总容量
  profiles: limit_route


---
spring:
  cloud:
    gateway:
      routes:
        - id: after_route
          uri: http://httpbin.org:80/get
          predicates:
            - After=2017-01-20T17:42:47.789-07:00[America/Denver]
  profiles: after_route
---
spring:
  cloud:
    gateway:
      routes:
        - id: header_route
          uri: http://httpbin.org:80/get
          predicates:
            - Header=X-Request-Id, \d+
  profiles: header_route
---
spring:
  cloud:
    gateway:
      routes:
        - id: host_route
          uri: http://httpbin.org:80/get
          predicates:
            - Host=**.fangzhipeng.com
  profiles: host_route

---
spring:
  cloud:
    gateway:
      routes:
        - id: method_route
          uri: http://httpbin.org:80/get
          predicates:
            - Method=GET
  profiles: method_route
---
spring:
  cloud:
    gateway:
      routes:
        - id: path_route
          uri: http://httpbin.org:80/get
          predicates:
            - Path=/foo/{segment}
  profiles: path_route
---
spring:
  cloud:
    gateway:
      routes:
        - id: query_route
          uri: http://httpbin.org:80/get
          predicates:
            - Query=foo, ba.
  profiles: query_route
---
spring:
  cloud:
    gateway:
      routes:
        - id: add_request_header_route
          uri: http://httpbin.org:80/get
          filters:
            - AddRequestHeader=X-Request-Foo, Bar
          predicates:
            - After=2017-01-20T17:42:47.789-07:00[America/Denver]
  profiles: add_request_header_route
---
spring: #重写路径
  cloud:
    gateway:
      routes: #路由器
        - id: rewritepath_route
          uri: https://blog.csdn.net
          predicates:
            - Path=/foo/**
          filters: #滤器工厂-此工厂将/foo/(?.*)重写为{segment}，然后转发到https://blog.csdn.net。比如在网页上请求localhost:8081/foo/forezp，此时会将请求转发到https://blog.csdn.net/forezp的页面
            - RewritePath=/foo/(?<segment>.*), /$\{segment}
  profiles: rewritepath_route

---
spring:
  cloud:
    gateway:
      routes:
        - id: elapse_route
          uri: http://httpbin.org:80/get
          filters:
            - RequestTime=false
          predicates:
            - After=2017-01-20T17:42:47.789-07:00[America/Denver]
  profiles: elapse_route



